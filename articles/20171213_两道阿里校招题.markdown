http://blog.csdn.net/emotion_c/article/details/77920401

### 第一题
```
实现一个EventEmitter类，这个类包含以下方法：
on（监听事件，该事件可以被触发多次）
once（也是监听事件，但只能被触发一次）
fire（触发指定的事件）
off（移除指定事件的某个回调方法或者所有回调方法）
```
```
class EventEmitter {
  /**请补充你的代码***/
}
const event = new EventEmitter()
const drank = (person) => {
  console.log(person + '喝水')
}
event.on('drank', drank)
event.on('eat', (person) => {
  console.log(person + '吃东西')
})
event.once('buy', (person) => {
  console.log(person + '买东西')
})
event.fire('drank', '我')   // 我喝水  
event.fire('drank', '我')   // 我喝水  
event.fire('eat', '其它人')   // 其它人吃东西
event.fire('eat', '其它人')   // 其它人吃东西
event.fire('buy', '其它人')  //其它人买东西
event.fire('buy', '其它人')  //这里不会再次触发buy事件，因为once只能触发一次
event.off('eat')  //移除eat事件
event.fire('eat', '其它人')  //这里不会触发eat事件，因为已经移除了
```
***
#### 答案
```
class EventEmitter {
    /**请补充你的代码***/
    constructor() {
      this.events = {};
      this.onceEvents = {};
    }

    on(e, cb) {
      this.events[e] = cb;
    }

    once(e, cb) {
      this.onceEvents[e] = cb;
    }

    fire(e, person) {
      if(this.events[e]) {
        this.events[e](person);
      }
      if(this.onceEvents[e]) {
        this.onceEvents[e](person);
//        this.onceEvents[e] = null;
        delete this.onceEvents[e];
      }
    }

    off(e) {
      this.onceEvents[e] = null;
      this.events[e] = null;
    }
  }
```
js这种函数为对象的语言，实现监听太容易了。

### 第二题

